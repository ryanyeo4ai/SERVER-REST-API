from hgbasic import get_char_code_value_string3

#----------------------------------
#----------------------------------
Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä = 'H' # 'Han'
Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê = 'E' # 'Eng'
Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê = 'N' # 'Num'
Í∏ÄÏûêÏÉÅÌÉú_Í≥µÎ∞± = 'S' # 'Spc'
Í∏ÄÏûêÏÉÅÌÉú_ÌÉ≠ = 'T' # 'Tab'
Í∏ÄÏûêÏÉÅÌÉú_Î¶¨ÌÑ¥ = 'R' # 'CR'
Í∏ÄÏûêÏÉÅÌÉú_Ï§ÑÎ∞îÍøà = 'L' # 'LF'
Í∏ÄÏûêÏÉÅÌÉú_Í∏∞Ìò∏ = 'I' # 'Sign'
Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™® = 'h' # 'Jamo'
Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê = 'C' # 'Hanja'
Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê = 'J' # 'Japan'
Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ = 'e' # 'Latin' 
Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥3 = '3' # 'Latin3'
Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥4 = '4' # 'Latin4'
Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥5 = '5' # 'Latin5'
Í∏ÄÏûêÏÉÅÌÉú_ÏùåÏÑ± = 'P' # 'Phonetic' # Phonetic Extensions 1D00(·¥Ä) ~ 1D7F(·µø)
#Í∏ÄÏûêÏÉÅÌÉú_Í∑∏Î¶¨Ïä§Ïñ¥ = 'G' # 'Greek'    # Greek and Coptic 0370(Õ∞) ~ 03FF(œø) ==> ÏòÅÎ¨∏Ïûê ÌÜ†ÌÅ∞Ïóê ÏûàÏñ¥Ïïº ÌïúÎã§.
Í∏ÄÏûêÏÉÅÌÉú_ÌÇ§Î¶¥ = 'Y' # 'Cyrillic' # Cyrillic 0400(–Ä) ~ 04FF(”ø)
Í∏ÄÏûêÏÉÅÌÉú_ÏïÑÎûçÏñ¥ = 'A' # 'Arabic'   # Arabic 0600(ÿÄ ) ~ 06FF(‚Äé€ø‚Äé)
#----- 
Í∏ÄÏûêÏÉÅÌÉú_ÏóëÏä§ = 'X' # 'Extra'
Í∏ÄÏûêÏÉÅÌÉú_ÎÑê = 'Z' # 'Zero'
#----- 
Í∏ÄÏûêÏÉÅÌÉú_Î™∞Îùº = 'NotDefine'
#----------------------------------
#----------------------------------


def get_script(char1):
    # old: get_char_type
    if(len(char1) != 1): # 1Í∏ÄÏûêÎßå ÌóàÏö©
        return 0
    ord_char = ord(char1)
    if((ord_char >= 0xAC00) and (ord_char <= 0xD7A3)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä # hangul 0xAC00(Í∞Ä) 0xD7A3(Ìû£))
    elif((ord_char >= ord('a')) and (ord_char <= ord('z'))):
         return Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê # english # 0x0061(a) ~ 0x007a(z)
    elif((ord_char >= ord('A')) and (ord_char <= ord('Z'))): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê # english # 0x0041(A) ~ 0x005a(Z)
    elif((ord_char >= ord('ÔΩÅ')) and (ord_char <= ord('ÔΩö'))): # Ï†ÑÍ∞Å ÏïåÌååÎ≤≥
         return Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê # fullwidth english # 0xff41(ÔΩÅ) ~ 0xff5a(ÔΩö)
    elif((ord_char >= ord('Ôº°')) and (ord_char <= ord('Ôº∫'))): # Ï†ÑÍ∞Å ÏïåÌååÎ≤≥
        return Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê # fullwidth english # 0xff21(Ôº°) ~ 0xff3a(Ôº∫)
    elif((ord_char >= ord('0')) and (ord_char <= ord('9'))): 
        return Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê # number # 0x0030(0) ~ 0x0039(9)
    elif((ord_char >= ord('Ôºê')) and (ord_char <= ord('Ôºô'))): # Ï†ÑÍ∞Å Ïà´Ïûê
        return Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê # number # 0xff10(Ôºê) ~ 0xff19(Ôºô)
    elif(ord_char == ord(' ')): 
        return Í∏ÄÏûêÏÉÅÌÉú_Í≥µÎ∞± # space 0x0020
    elif(ord_char == ord('\t')): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌÉ≠ # tab 0x0009
    elif(ord_char == ord('\r')): 
        return Í∏ÄÏûêÏÉÅÌÉú_Î¶¨ÌÑ¥ # carrage-return 0x000D	
    elif(ord_char == ord('\n')): 
        return Í∏ÄÏûêÏÉÅÌÉú_Ï§ÑÎ∞îÍøà # line-feed  0x000A
    elif((ord_char >= 1) and (ord_char <= 127)): 
        return Í∏ÄÏûêÏÉÅÌÉú_Í∏∞Ìò∏  # sign
    #----------------------------------
    #----------------------------------
    #----- Hangul Jamo
    elif((ord_char >= 0x1100) and (ord_char <= 0x11FF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™® # hangul Jamo 0x1100(·ÑÄ) 0x11FF(·áø))
    elif((ord_char >= 0xA960) and (ord_char <= 0xA97C)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™® # hangul Jamo extended-A 0xA960(Í•†) 0xA97C(Í•º))
    elif((ord_char >= 0xD7B0) and (ord_char <= 0xD7C6)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™® # hangul Jamo extended-B1 0xD7B0(Ìû∞) 0xD7C6(ÌüÜ))
    elif((ord_char >= 0xD7CB) and (ord_char <= 0xD7FB)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™® # hangul Jamo extended-B2 0xD7CB(Ìüã) 0xD7FB(Ìüª))
    elif((ord_char >= 0x3131) and (ord_char <= 0x318E)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™® # Hangul Compatibility Jamo 0x3131(·ÑÄ) 0x318e(„Üé))
    elif((ord_char >= 0xFFA0) and (ord_char <= 0xFFDC)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™® # hangul Jamo Halfwidth 0xFFA0(filler) 0xFFDC(Ôøú)) # 'Halfwidth Hangul variants'
    #----------------------------------
    #----------------------------------
    #----- CJK Unified Ideographs -----
    elif((ord_char >= 0x4E00) and (ord_char <= 0x9FFC)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê # (20928) CJK Unified Ideographs 0x4E00(‰∏Ä) 0x9FFC(ÈøØ) <= ÌôîÎ©¥ Ï∂úÎ†• Ïïà Îê®
    elif((ord_char >= 0x3400) and (ord_char <= 0x4DBF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê # (6592) CJK Unified Ideographs  Extension-A 0x3400(„êÄ) 0x4DBF(‰∂ø) <= ÌôîÎ©¥ Ï∂úÎ†• Ïïà Îê®
    elif((ord_char >= 0x20000) and (ord_char <= 0x2A6DD)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê # (42720) CJK Unified Ideographs  Extension-B 0x20000(†ÄÄ) 0x2A6DD(ÔøΩ)
    elif((ord_char >= 0x2A700) and (ord_char <= 0x2B734)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê # (4160) CJK Unified Ideographs  Extension-C 0x2A700(ÔøΩ) 0x2B734(ÔøΩ)
    elif((ord_char >= 0x2B740) and (ord_char <= 0x2B81D)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê # (224) CJK Unified Ideographs  Extension-D 0x2B740(ÔøΩ) 0x2B81D(ÔøΩ)
    elif((ord_char >= 0x2B820) and (ord_char <= 0x2CEA1)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê # (5776) CJK Unified Ideographs  Extension-E 0x2B820(ÊÖê) 0x2CEA1(ÔøΩ) # {0x2B820(ÊÖê)}ÌïúÏûêÎäî Ïú†ÎãàÏΩîÎìúÏóêÏÑú Î≥¥Ïó¨Ï£ºÎäî Í∏ÄÏûêÎûë Îã§Î•∏ Í∏ÄÏûêÍ∞Ä ÌëúÏãúÎêú Í≤ÉÏù¥Îã§.
    elif((ord_char >= 0x2CEB0) and (ord_char <= 0x2EBE0)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê # (7488) CJK Unified Ideographs  Extension-F 0x2CEB0(Ë©±) 0x2EBE0(ÔøΩ) # {0x2CEB0(Ë©±)}ÌïúÏûêÎäî Ïú†ÎãàÏΩîÎìúÏóêÏÑú Î≥¥Ïó¨Ï£ºÎäî Í∏ÄÏûêÎûë Îã§Î•∏ Í∏ÄÏûêÍ∞Ä ÌëúÏãúÎêú Í≤ÉÏù¥Îã§.
    elif((ord_char >= 0x30000) and (ord_char <= 0x3134A)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê # (7488) CJK Unified Ideographs  Extension-F 0x30000(Óøà) 0x3134A(‰æÖ)  # {0x3134A(‰æÖ)}ÌïúÏûêÎäî Ïú†ÎãàÏΩîÎìúÏóêÏÑú Î≥¥Ïó¨Ï£ºÎäî Í∏ÄÏûêÎûë Îã§Î•∏ Í∏ÄÏûêÍ∞Ä ÌëúÏãúÎêú Í≤ÉÏù¥Îã§.
    #----- CJK Compatibility Ideographs -----
    elif((ord_char >= 0xF900) and (ord_char <= 0xFAFF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê # CJK Compatibility Ideographs(ÌïúÏ§ëÏùº Ìò∏ÌôòÏö© ÌïúÏûê)	0xF900(Ô§Ä) - 0xFAFF {Ïã§Ï†ú Í∏ÄÏûêÎäî 0xFAD9(Ô´ô)ÍπåÏßÄ}
    elif((ord_char >= 0x2F800) and (ord_char <= 0x2FA1F)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê  # CJK Compatibility Ideographs Supplement(ÌïúÏ§ëÏùº Ìò∏ÌôòÏö© ÌïúÏûê Î≥¥Ï∂©) 0x2F800(Ø†Ä) - 0x2FA1F {Ïã§Ï†ú Í∏ÄÏûêÎäî 0x2FA1D(™òÄ)ÍπåÏßÄ}
    #----- CJK Radicals / Kangxi Radicals -----
    elif((ord_char >= 0x2F00) and (ord_char <= 0x2FDF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê  # CJK Radicals / Kangxi Radicals  0x2F00(‚ºÄ) - 0x2FDF {Ïã§Ï†ú Í∏ÄÏûêÎäî 0x2FD5(‚øï)ÍπåÏßÄ}
    elif((ord_char >= 0x2E80) and (ord_char <= 0x2EFF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê  # CJK Radicals Supplement(ÌïúÏ§ëÏùº Î∂ÄÏàò Î≥¥Ï∂©)	0x2E80(‚∫Ä) - 0x2EFF {Ïã§Ï†ú Í∏ÄÏûêÎäî 0x2EF3(‚ª≥)ÍπåÏßÄ}
    elif((ord_char >= 0x31C0) and (ord_char <= 0x31EF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê # CJK Strokes  0x31C0(„áÄ) - 0x31EF {Ïã§Ï†ú Í∏ÄÏûêÎäî 0x31E3(„á£)ÍπåÏßÄ}
    #----------------------------------
    #----------------------------------
    # ÏùºÎ≥∏Ïñ¥ Í∞ÄÎÇò
    elif((ord_char >= ord('„ÅÅ')) and (ord_char <= ord('„Çü'))):
        return Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê # Hiragana 0x3041(„ÅÅ) ~ 0x309F(„Çü)
    elif((ord_char >= ord('„Ç°')) and (ord_char <= ord('„Éø'))): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê # Katakana 0x30A1(„Ç°) ~ 0x30FF(„Éø)
    elif((ord_char >= ord('„á∞')) and (ord_char <= ord('„áø'))):
        return Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê # Katakana Phonetic Extensions 0x31F0(„á∞) ~ 0x31FF(„áø)
    elif((ord_char >= 0x1B000) and (ord_char <= 0x1B0FF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê   # Kana Supplement 0x1B000(õÄÄ) ~ 0x1B0FF(õÉø)
    elif((ord_char >= 0x1B100) and (ord_char <= 0x1B11E)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê   # Kana Extended-A 0x1B100(õÑÄ) ~ 0x1B11E(õÑû)
    elif((ord_char >= 0x1B150) and (ord_char <= 0x1B167)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê   # Small Kana Extension 0x1B150(õÖê) ~ 0x1B167(õÖß)
    elif((ord_char >= 0xFF65) and (ord_char <= 0xFF9F)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê   # Halfwidth Katakana variants 0xFF65(ÔΩ•) ~ 0xFF9F( Ôæü)
    elif((ord_char >= ord('„Ä±')) and (ord_char <= ord('„Äµ'))): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê # Kana repeat marks 0x3031(„Ä±) ~ 0x3035(„Äµ) <= CJK Symbols and Punctuation
    #----------------------------------
    #----------------------------------
    # ÎùºÌã¥Í≥Ñ Î¨∏Ïûê         # https://unicode.org/charts/nameslist/ Ï∞∏Ï°∞
    elif((ord_char >= ord('√Ä')) and (ord_char <= ord('√ñ'))): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ # Latin-1 Supplement 0x00C0(√Ä) ~ 0x00D6(√ñ)
    elif((ord_char >= ord('√ò')) and (ord_char <= ord('√∂'))): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ # Latin-1 Supplement 0x00D8(√ò) ~ 0x00F6(√∂)
    elif((ord_char >= ord('√∏')) and (ord_char <= ord('√ø'))):
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ # Latin-1 Supplement 0x00F8(√∏) ~ 0x00FF(√ø)
    elif((ord_char >= ord('ƒÄ')) and (ord_char <= ord('≈ø'))): 
    #----- 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ # Latin Extended-A 0x0100(ƒÄ) ~ 0x017F(≈ø) <= European Latin
    elif((ord_char >= 0x1E00) and (ord_char <= 0x1EFF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ # Latin Extended Additional 0x1E00(·∏Ä) ~ 0x1EFF(·ªø)
    elif((ord_char >= ord('∆Ä')) and (ord_char <= ord('∆ø'))): 
    #----- 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ # Latin Extended-B 0x0180(∆Ä) ~ 0x01BF(∆ø) <= Non-European and historic Latin ...
    elif((ord_char >= ord('«Ñ')) and (ord_char <= ord('…è'))): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ # Latin Extended-B 0x01C4(«Ñ) ~ 0x024F(…è)
    #----- 
    elif((ord_char >= 0x0250) and (ord_char <= 0x02AF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ # IPA Extensions 0x0250(…ê) ~ 0x02AF( Ø)
    #----- 
    elif((ord_char >= 0x02B0) and (ord_char <= 0x02F8)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ # Spacing Modifier Letters 0x02B0( ∞) ~ 0x02F8(À∏) [ÎÅùÏùÄ 0x02FF(Àø)Ïù¥ÏßÄÎßå ÏïåÌååÎ≤≥Ïù¥ ÏïÑÎãàÎùºÏÑú Í∑∏ ÏïûÏóê ÎÅùÏùÑ Ïû°Ïùå]
    #----- 
    elif((ord_char >= 0x0300) and (ord_char <= 0x036F)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ # Combining Diacritical Marks 0x0300(‚óåÃÄ )~0x036F(‚óåÕØ )        
    #----- 
    elif((ord_char >= 0x0370) and (ord_char <= 0x03FF)): 
        # ÏòÅÏñ¥ Î∞úÏùåÍ∏∞Ìò∏ Í∏ÄÏûê Ï§ëÏóê [Greek and Coptic]Ïóê ÏûàÎäî Í≤ÉÏù¥ ÏûàÎã§. 
        # Î∞úÏùåÍ∏∞Ìò∏ ÌëúÍ∏∞ ('Œ∏ril')Ïóê Í∑∏Î¶¨Ïä§ Î¨∏ÏûêÎ•º ÏÇ¨Ïö©ÌïòÎØÄÎ°ú ÏòÅÎ¨∏Ïûê ÌÜ†ÌÅ∞ÏúºÎ°ú Îã§Î§ÑÏïº Îã®Ïñ¥Í∞Ä ÎÅäÏñ¥ÏßÄÏßÄ ÏïäÎäîÎã§.
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥ # Greek and Coptic 0x0370(Õ∞) ~ 0x03FF(œø)  
    #----- 
    #----- 
    #----- 
    elif((ord_char >= ord('‚±†')) and (ord_char <= ord('‚±ø'))): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥3 # Latin Extended-C 0x2C60(‚±†) ~ 0x2C7F(‚±ø)
    #----- 
    elif((ord_char >= 0xA720) and (ord_char <= 0xA7FF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥4 # Latin Extended-D 0xA720(Íú†) ~ 0xA7FF(Íüø)
    #----- 
    elif((ord_char >= 0xAB30) and (ord_char <= 0xAB67)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥5 # Latin Extended-E 0xAB30(Í¨∞) ~ 0xAB67(Í≠ß)
    #----- 
    #----- 
    #----- 
    elif((ord_char >= 0x1D00) and (ord_char <= 0x1D7F)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏùåÏÑ± # Phonetic Extensions 0x1D00(·¥Ä) ~ 0x1D7F(·µø)
    elif((ord_char >= 0x1D80) and (ord_char <= 0x1DBF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏùåÏÑ± # Phonetic Extensions Supplement 0x1D80(·∂Ä) ~ 0x1DBF(·∂ø)
    #----- 
    elif((ord_char >= 0x0400) and (ord_char <= 0x04FF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÌÇ§Î¶¥ # Cyrillic 0x0400(–Ä) ~ 0x04FF(”ø)
    #----- 
    elif((ord_char >= 0x0600) and (ord_char <= 0x06FF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏïÑÎûçÏñ¥ # Arabic 0x0600(ÿÄ ) ~ 0x06FF(‚Äé€ø‚Äé)
    elif((ord_char >= 0x08A0) and (ord_char <= 0x08FF)): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏïÑÎûçÏñ¥ # Arabic Extended-A 0x08A0(‚Äé‡¢†) ~ 08FF(‚óå‡£ø) # ÌôîÎ©¥Ïóê Îã§Î•¥Í≤å Î≥¥Ïù∏Îã§.  
    #----------------------------------
    #----------------------------------
    elif(ord_char >= 128): 
        return Í∏ÄÏûêÏÉÅÌÉú_ÏóëÏä§  # extra
    else: 
        return Í∏ÄÏûêÏÉÅÌÉú_ÎÑê # 0x00 Zero

def get_script_name(script, HangulName=False):
    # old: get_char_type_fullname
    if(script == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): 
        if(HangulName==True): return 'ÌïúÍ∏Ä'
        else: return 'Han'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): 
        if(HangulName==True): return 'ÏòÅÎ¨∏Ïûê'
        else: return 'Eng'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): 
        if(HangulName==True): return 'Ïà´Ïûê'
        else: return 'Num'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_Í≥µÎ∞±): 
        return 'Spc'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÌÉ≠): return 'Tab'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_Î¶¨ÌÑ¥): return 'CR'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_Ï§ÑÎ∞îÍøà): return 'LF'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_Í∏∞Ìò∏): return 'Sign'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™®): 
        if(HangulName==True): return 'ÌïúÍ∏ÄÏûêÎ™®'
        else: return 'Jamo'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê): 
        if(HangulName==True): return 'ÌïúÏûê'
        else: return 'Hanja'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê): 
        if(HangulName==True): return 'ÏùºÎ≥∏Í∞ÄÎÇò'
        else: return 'Japan'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥): return 'Latin' 
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥3): return 'Latin3'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥4): return 'Latin4'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥5): return 'Latin5'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÏùåÏÑ±): return 'Phonetic' # Phonetic Extensions 1D00(·¥Ä) ~ 1D7F(·µø)
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÌÇ§Î¶¥): 
        if(HangulName==True): return 'ÌÇ§Î¶¥Î¨∏Ïûê'
        else: return 'Cyrillic' # Cyrillic 0400(–Ä) ~ 04FF(”ø)
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÏïÑÎûçÏñ¥): return 'Arabic'   # Arabic 0600(ÿÄ ) ~ 06FF(‚Äé€ø‚Äé)
    #----- 
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÏóëÏä§): return 'Extra'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÎÑê): return 'Zero'
    #----------------------------------
    #----------------------------------
    else:return Í∏ÄÏûêÏÉÅÌÉú_Î™∞Îùº

_keyword_char_state_list_ = [
    Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä, # 'Han'
    Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê, # 'Eng'
    Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê, # 'Num'
    Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™®, # 'Jamo'
    Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê, # 'Hanja'
    Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê, # 'Japan'
    Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥, # 'Latin'
    Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥3, # 'Latin3'
    Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥4, # 'Latin4'
    Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥5, # 'Latin5'
    Í∏ÄÏûêÏÉÅÌÉú_ÏùåÏÑ±, # 'Phonetic' # Phonetic Extensions 1D00(·¥Ä) ~ 1D7F(·µø)
    Í∏ÄÏûêÏÉÅÌÉú_ÌÇ§Î¶¥, # 'Cyrillic' # Cyrillic 0400(–Ä) ~ 04FF(”ø)
    Í∏ÄÏûêÏÉÅÌÉú_ÏïÑÎûçÏñ¥, # 'Arabic'   # Arabic 0600(ÿÄ ) ~ 06FF(‚Äé€ø‚Äé)
]
_non_keyword_char_state_list_ = [
    Í∏ÄÏûêÏÉÅÌÉú_Í≥µÎ∞±,# space
    Í∏ÄÏûêÏÉÅÌÉú_ÌÉ≠,# tab
    Í∏ÄÏûêÏÉÅÌÉú_Î¶¨ÌÑ¥,# carrage-return
    Í∏ÄÏûêÏÉÅÌÉú_Ï§ÑÎ∞îÍøà,# line-feed
    Í∏ÄÏûêÏÉÅÌÉú_Í∏∞Ìò∏,# sign
    Í∏ÄÏûêÏÉÅÌÉú_ÏóëÏä§,# extra
    Í∏ÄÏûêÏÉÅÌÉú_ÎÑê, # 0x00 Zero
]

def _is_script_keyword_old(script):
    # old: is_char_type_keyword
    '''
    if(script == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): return True # 'Han'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): return True # 'Eng'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): return True # 'Num'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™®): return True # 'Jamo'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê): return True # 'Hanja'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÏùºÎ¨∏Ïûê): return True # 'Japan'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥): return True # 'Latin'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥3): return True # 'Latin3'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥4): return True # 'Latin4'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥5): return True # 'Latin5'
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÏùåÏÑ±): return True # 'Phonetic' # Phonetic Extensions 1D00(·¥Ä) ~ 1D7F(·µø)
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÌÇ§Î¶¥): return True # 'Cyrillic' # Cyrillic 0400(–Ä) ~ 04FF(”ø)
    elif(script == Í∏ÄÏûêÏÉÅÌÉú_ÏïÑÎûçÏñ¥): return True # 'Arabic'   # Arabic 0600(ÿÄ ) ~ 06FF(‚Äé€ø‚Äé)
    else: return False
    '''
    if script in _keyword_char_state_list_:
        return True
    else: 
        return False

def is_2byte_Compatibility_unit(char1):
    # CJK Compatibility Ï§ëÏóêÏÑú ÏòÅÎ¨∏ÏûêÎ°ú Îêú Îã®ÏúÑ
    if(len(char1) != 1): # 1Í∏ÄÏûêÎßå ÌóàÏö©
        return False
    ord_char = ord(char1)
    if((ord_char >= 0x3371) and (ord_char <= 0x337A)):
        return True # Squared Latin abbreviations // 3371 „ç± SQUARE HPA(h P a) // 337A Óç∫ SQUARE IU(I U)
    elif((ord_char >= 0x3380) and (ord_char <= 0x33DF)):
        # Squared Latin abbreviations or Abbreviations involving liter symbols
        # 3380 „éÄ SQUARE PA AMPS (p A) ~ 33DF Óèü SQUARE A OVER M (A ‚àï m)
        return True
    else:
        return False

def get_scripts(str):
    # old: get_string_char_type_string
    # old: get_char_type_string__string
    hglen = len(str)
    scripts = '';
    for i in range(hglen):
        char1 = str[i]
        script1 = get_script(char1)
        if(script1 != 0):
            scripts += get_script(char1)
        else:
            print('logic error: get_script(char1) == 0')
            print(str)
            return scripts
    return scripts

def get_keyword_type_num__scripts(scripts):
    # old: get_keyword_type_num__chartype_string
    hglen = len(scripts)
    keyword_type_num = 0
    for i in range(0, hglen):
        if(scripts[i] in _keyword_char_state_list_):
            keyword_type_num += 1
    return keyword_type_num

def print_scripts__string(str, type_fullname=False, sep='\t'):
    # old: print_string_char_type
    # old: print_char_type_string__string
    hglen = len(str)
    print ("string len : ", hglen)
    print('ÏàúÏÑú:', sep, 'Í∏ÄÏûê', sep, 'Ïã≠ÏßÑÏàò', sep, '16ÏßÑÏàò', sep, '(Ïä§ÌÅ¨Î¶ΩÌä∏)')
    for i in range(0, hglen):
        char1 = str[i]
        script1 = get_script(char1)
        if(type_fullname==True):
            script1 = get_script_name(script1);
        char_code_value_string = get_char_code_value_string3(char1, sep=sep)
        print('%i:' %i, sep, char_code_value_string, sep, '(', script1, ')')
    print ("")

def get_script_list(str):
    # old: get_string_char_type_list
    # old: get_char_type_list__string
    # old: get_script_list__string
    hglen = len(str)
    scripts = get_scripts(str)
    scripts_len = len(scripts)
    #print ("string  len: ", hglen)
    #print ("char type len: ", scripts_len)
    #print ("char type list: ", scripts)

    #####
    script_list = []
    if(hglen <= 0): # Ïô∏Î∂ÄÏóêÏÑú Ïã§ÏàòÎ°ú ÎÇ¥Ïö©Ïù¥ ÏóÜÎäî Î¨∏ÏûêÏó¥ÏùÑ Ï†ÑÎã¨Ìï† ÏàòÎèÑ ÏûàÎã§.
        return script_list
        
    #######################################
    ##script_rec = {
    ##'script': '',  # Î¨∏Ïûê ÏÉÅÌÉú
    ##'pos': -1,     # Î¨∏ÏûêÏó¥ÏóêÏÑú ÌÜ†ÌÅ∞ ÏúÑÏπò
    ##'len': 0,      # ÌÜ†ÌÅ∞ Í∏∏Ïù¥
    ##'string': ''   # ÌÜ†ÌÅ∞ Î¨∏ÏûêÏó¥
    ##'ending': None #Îß® ÎÅùÏóê ÏûàÎäî ÌÜ†ÌÅ∞(Î≥µÌï© ÌÜ†ÌÅ∞ÏóêÏÑú ÏÇ¨Ïö©)
    ##}
    #######################################

    script_pre = ''
    pos_pre = -1
    samecnt = 0
    for i in range(0, hglen):
        script = scripts[i]
        if(script_pre == script):
            samecnt += 1
        else: # Î¨∏Ïûê ÏÉÅÌÉúÍ∞Ä Îã¨ÎùºÎèÑ {ÌïúÍ∏Ä, ÏòÅÎ¨∏Ïûê}Îäî Ï∂îÍ∞Ä Í≤ÄÏÇ¨Î•º ÌïúÎã§.
            if((script_pre == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä) and (script == Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™®)): # {ÌïúÍ∏ÄÏùåÏ†à+ÌïúÍ∏ÄÏûêÎ™®}
                samecnt += 1
            elif((script_pre == Í∏ÄÏûêÏÉÅÌÉú_ÏûêÎ™®) and (script == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä)): # {ÌïúÍ∏ÄÏûêÎ™®+ÌïúÍ∏ÄÏùåÏ†à}
                samecnt += 1
            elif((script_pre == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê) and (script == Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥)): # {ÏòÅÎ¨∏Ïûê+ÎùºÌã¥ÌôïÏû•}
                samecnt += 1
            elif((script_pre == Í∏ÄÏûêÏÉÅÌÉú_ÎùºÌã¥Ïñ¥) and (script == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê)): # {ÎùºÌã¥ÌôïÏû•+ÏòÅÎ¨∏Ïûê}
                samecnt += 1
            else:
                if(i != 0): # first-item
                    wordlen = (samecnt + 1)
                    word = str[pos_pre: (pos_pre + wordlen)]
                    script_rec = {
                        'script': script_pre, # Î¨∏Ïûê ÏÉÅÌÉú
                        'pos': pos_pre,       # Î¨∏ÏûêÏó¥ÏóêÏÑú ÌÜ†ÌÅ∞ ÏúÑÏπò
                        'len': wordlen,       # ÌÜ†ÌÅ∞ Í∏∏Ïù¥
                        'string': word,       # ÌÜ†ÌÅ∞ Î¨∏ÏûêÏó¥
                        #'ending': None,      #Îß® ÎÅùÏóê ÏûàÎäî ÌÜ†ÌÅ∞(Î≥µÌï© ÌÜ†ÌÅ∞ÏóêÏÑú ÏÇ¨Ïö©)
                    }
                    script_list.append(script_rec)
                    #print ('cur-state (%i) :' %i, '[' + script_pre, '-', script +']')

                script_pre = script
                samecnt = 0
                pos_pre = i

    if((i + 1) == hglen): # last-item
        wordlen = (samecnt + 1)
        word = str[pos_pre: (pos_pre + wordlen)]

        script_rec = {
            'script': script_pre, # Î¨∏Ïûê ÏÉÅÌÉú
            'pos': pos_pre,       # Î¨∏ÏûêÏó¥ÏóêÏÑú ÌÜ†ÌÅ∞ ÏúÑÏπò
            'len': wordlen,       # ÌÜ†ÌÅ∞ Í∏∏Ïù¥
            'string': word,       # ÌÜ†ÌÅ∞ Î¨∏ÏûêÏó¥
            #'ending': None,      #Îß® ÎÅùÏóê ÏûàÎäî ÌÜ†ÌÅ∞(Î≥µÌï© ÌÜ†ÌÅ∞ÏóêÏÑú ÏÇ¨Ïö©)
        }
        script_list.append(script_rec)
        #print ('cur-state (%i) :' %i, '[' + script_pre, '-', script +']')
    if(len(script_list) <= 0):
        print('i : %i' %i)
        print('logic error: empty script_list')
    #print('script_list : ', script_list)
    return script_list

def print_script_list(script_list, no_print_ending = True, no_print_white_char = False, simple_print = False):
    # old: print_chartype_list
    if(script_list == None): return
    script_list_len = len(script_list)
    #print( "script list len : " , script_list_len)

    for i in range(0, script_list_len):
        script_rec = dict(script_list[i])
        if(no_print_white_char == True):
            if((script_rec['script'] == Í∏ÄÏûêÏÉÅÌÉú_Í≥µÎ∞±) or (script_rec['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌÉ≠)): # space or tab
                continue
        if(no_print_ending == True):
            if 'ending' in script_rec: del script_rec['ending']
        if(simple_print == True):
            print( "%i :\t" %i, script_rec['string'] + '\t[', script_rec['pos'], ':', script_rec['len'], ']' )
        else:
            print( "%i :\t" %i, script_rec)

def get_hybrid_script2(script_first, script_second):
    #script_rec = { 'script': '', 'pos': -1, 'len': 0, 'string': '', 'ending': None}

    hybrid_type = False
    if(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # 1Ïõî
            hybrid_type = True
        elif(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # 10cm
            hybrid_type = True
        elif(script_second['len'] == 1):
                if(is_2byte_Compatibility_unit(script_second['string']) == True):
                    hybrid_type = True # 2000„èÑ    3000„èÑ  („èÑ: ÏòÅÎ¨∏Ïûê cÏùò Ïó∞ÏÜçÏù¥ ÏïÑÎãàÎã§.)

    elif(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê):
        if((script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä) or (script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê)): # KÎ¶¨Í∑∏
            hybrid_type = True
    elif(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # ÌïúÎØ∏FTA
            hybrid_type = True
        elif(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # ÎØ∏Í∑∏21
            hybrid_type = True
        elif(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê): # Ï§ëÏïô‰∫û
            hybrid_type = True
    elif(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÏûê):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # ÊùéÏ¥ùÎ¶¨
            hybrid_type = True
    elif(script_first['string'] == '-'):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # -17
            hybrid_type = True
    elif(script_first['string'] == '+'):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # +15
            hybrid_type = True
    elif(script_first['string'] == '$'):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # $10
            hybrid_type = True

    if(hybrid_type == True):
        script_new = dict(script_first);
        script_new['script'] += script_second['script']
        script_new['len'] += script_second['len']
        script_new['string'] += script_second['string']

        script_new['ending'] = dict(script_second)
        return script_new
    else:
        return None

def get_hybrid_script3(script_first, script_second, script_third):
    #script_rec = { 'script': '', 'pos': -1, 'len': 0, 'string': '', 'ending': None}

    hybrid_type = False
    if(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
        if((script_second['string'] == '.') or (script_second['string'] == '/')):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # 1.5   1/5
                hybrid_type = True
        elif(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # 26cmÏùò
                hybrid_type = True
        elif(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # 2Ï≤úCC
                hybrid_type = True
        elif(script_second['len'] == 1):
                if(is_2byte_Compatibility_unit(script_second['string']) == True):
                    if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä):
                        hybrid_type = True # 2000„èÑÍ∏â  3000„èÑÍ∏â  („èÑ: ÏòÅÎ¨∏Ïûê cÏùò Ïó∞ÏÜçÏù¥ ÏïÑÎãàÎã§.)

    elif(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê):
        if(script_second['string'] == '&'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # m&a  r&d
                hybrid_type = True
        elif(script_second['string'] == '-'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # out-performed
                hybrid_type = True
            elif(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # CD-Î°¨  D-Îç∞Ïù¥
                hybrid_type = True
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # D-3
                hybrid_type = True
        elif(script_second['string'] == "'"):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # didn't  Here's
                hybrid_type = True
        elif(script_second['string'] == "+"):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # ctl+v
                hybrid_type = True

    elif(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä):
        if(script_second['string'] == '¬∑'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # Ìïú¬∑Ïùº
                # Ï≤´ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî 1ÏùåÏ†àÎ°ú Ï†úÌïúÌïúÎã§. 2ÏùåÏ†à Ïù¥ÏÉÅÏùÄ Ïñ¥ÏÉâÌïú Í≤ÉÏù¥ ÎßéÎã§.
                if(script_first['len'] == 1):
                    hybrid_type = True
        elif(script_second['string'] == '-'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # ÎØ∏Í∑∏-21
                hybrid_type = True
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # Ïä§Ïª§Îìú-C
                hybrid_type = True
                
        elif(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # Ï≤ú5Î∞±  ÏÑ∏Í≥Ñ1ÏúÑ
                hybrid_type = True
        elif(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # Í∞§S10
                hybrid_type = True
            elif(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # Î≤ôÏª§CÏú†
                hybrid_type = True

    elif(script_first['string'] == '-'):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # -17ÎèÑ
                hybrid_type = True
    elif(script_first['string'] == '+'):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # +17ÎèÑ
                hybrid_type = True

    if(hybrid_type == True):
        script_new = dict(script_first);
        script_new['script'] += script_second['script']
        script_new['len'] += script_second['len']
        script_new['string'] += script_second['string']

        script_new['script'] += script_third['script']
        script_new['len'] += script_third['len']
        script_new['string'] += script_third['string']

        script_new['ending'] = dict(script_third)
        return script_new
    else:
        return None

def get_hybrid_script4(script_first, script_second, script_third, script_forth):
    #script_rec = { 'script': '', 'pos': -1, 'len': 0, 'string': '', 'ending': None}

    hybrid_type = False
    if(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
        if(script_second['string'] == '.'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # 1.5
                if(script_forth['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # 1.5ÎØ∏ÌÑ∞
                    hybrid_type = True
                elif(script_forth['string'] == '$'): # 10.5$
                    hybrid_type = True
                elif(script_forth['string'] == '%'): # 0.5%
                    hybrid_type = True
                elif(script_forth['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # 16.6g
                    hybrid_type = True
        elif(script_second['string'] == '/'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # 1/4
                if(script_forth['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # 2/4Î∂ÑÍ∏∞
                    hybrid_type = True
        elif(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
                if(script_forth['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # 1Ïãú5Î∂Ñ
                    hybrid_type = True
        elif(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê):
            if(script_third['string'] == '/'):
                if(script_forth['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # 80km/h
                    hybrid_type = True

    elif(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê):
        if(script_second['string'] == '.'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # m&a  r&d
                if(script_forth['string'] == '.'): # U.S.
                    hybrid_type = True                
        elif(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): 
                if(script_forth['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # H5N1
                    hybrid_type = True                
            elif(script_third['string'] == '-'): 
                if(script_forth['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # A1-Í¥ëÍµ¨
                    hybrid_type = True                
    
    elif(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê):
            if((script_third['string'] == '/') or (script_third['string'] == '.') or (script_third['string'] == '&')):
                if(script_forth['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # Ïú†Ïã§Î∞©ÏßÄÎåÄÏ±ÖT/F  ÏõåÏã±ÌÑ¥D.C  ÎÇòÎùºM&D
                    hybrid_type = True                
    
    elif((script_first['string'] == '-') or (script_first['string'] == '+')):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
            if(script_third['script'] == '.'):
                if(script_forth['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # -1.7    +1.7
                    hybrid_type = True
    
    elif(script_first['string'] == '$'):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
            if(script_third['script'] == '.'):
                if(script_forth['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # $1.7
                    hybrid_type = True

    if(hybrid_type == True):
        script_new = dict(script_first);
        script_new['script'] += script_second['script']
        script_new['len'] += script_second['len']
        script_new['string'] += script_second['string']

        script_new['script'] += script_third['script']
        script_new['len'] += script_third['len']
        script_new['string'] += script_third['string']

        script_new['script'] += script_forth['script']
        script_new['len'] += script_forth['len']
        script_new['string'] += script_forth['string']

        script_new['ending'] = dict(script_forth)
        return script_new
    else:
        return None

def get_hybrid_script5(script_first, script_second, script_third, script_forth, script_fifth):
    #script_rec = { 'script': '', 'pos': -1, 'len': 0, 'string': '', 'ending': None}

    hybrid_type = False
    if((script_first['string'] == '-') or (script_first['string'] == '+')):
        if(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
            if(script_third['string'] == '.'): # -17.
                if(script_forth['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # -17.1
                    if(script_fifth['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # -17.1ÎèÑ    +17.1ÎèÑ
                        hybrid_type = True
    elif(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
        if(script_second['string'] == '.'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # 1.5
                if(script_forth['string'] == '.'): # 2019.1.
                    if(script_fifth['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # 2019.1.1
                        hybrid_type = True
        elif(script_second['string'] == '/'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # 1/5
                if(script_forth['string'] == '/'): # 2019/1/
                    if(script_fifth['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê): # 2019/1/1
                        hybrid_type = True
        elif(script_second['string'] == '-'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # 10-year
                if(script_forth['string'] == '-'): # 10-year-
                    if(script_fifth['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # 10-year-old
                        hybrid_type = True
    elif(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê):
        if(script_second['string'] == '-'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê):
                if(script_forth['string'] == '-'):
                    if(script_fifth['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # commander-in-chief
                        hybrid_type = True
        elif(script_second['string'] == '.'):
            if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê):
                if(script_forth['string'] == '.'):
                    if(script_fifth['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÏòÅÎ¨∏Ïûê): # edition.cnn.com
                        hybrid_type = True
    #elif(script_first['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä):
    #    if(script_second['string'] == '¬∑'):
    #        if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # Ìïú¬∑Ïùº
    #            hybrid_type = True
    #    elif(script_second['script'] == Í∏ÄÏûêÏÉÅÌÉú_Ïà´Ïûê):
    #        if(script_third['script'] == Í∏ÄÏûêÏÉÅÌÉú_ÌïúÍ∏Ä): # Ï≤ú5Î∞±  ÏÑ∏Í≥Ñ1ÏúÑ
    #            hybrid_type = True

    if(hybrid_type == True):
        script_new = dict(script_first);
        script_new['script'] += script_second['script']
        script_new['len'] += script_second['len']
        script_new['string'] += script_second['string']

        script_new['script'] += script_third['script']
        script_new['len'] += script_third['len']
        script_new['string'] += script_third['string']

        script_new['script'] += script_forth['script']
        script_new['len'] += script_forth['len']
        script_new['string'] += script_forth['string']

        script_new['script'] += script_fifth['script']
        script_new['len'] += script_fifth['len']
        script_new['string'] += script_fifth['string']

        script_new['ending'] = dict(script_fifth)
        return script_new
    else:
        return None

def get_hybrid_script_list5(script_list):
    script_list_len = len(script_list)
    #print( "script list len : " , script_list_len)

    #script_rec = { 'script': '', 'pos': -1, 'len': 0, 'string': '', 'ending': None}

    hybrid_script_list = []
    script_rec_pre4 = None
    script_rec_pre3 = None
    script_rec_pre2 = None
    script_rec_pre = None
    script_rec = None
    for i in range(script_list_len):        
        script_rec = script_list[i]
        if(script_rec_pre != None):   # 2Í∞ú
            if(script_rec_pre2 != None):  # 3Í∞ú
                if(script_rec_pre3 != None):  # 4Í∞ú
                    if(script_rec_pre4 != None):  # 5Í∞ú
                        hybrid_script = get_hybrid_script5(script_rec_pre4, script_rec_pre3, script_rec_pre2, script_rec_pre, script_rec)
                        if(hybrid_script != None):
                            #print( "dbg: (4) %i (hybrid_script != None)" %i)
                            hybrid_script_list.append(hybrid_script)
                            script_rec_pre4 = None
                            script_rec_pre3 = None
                            script_rec_pre2 = None
                            script_rec_pre = None
                            script_rec = None

        if(script_rec_pre4 != None): # 1Í∞ú Ï≤òÎ¶¨
            #print( "dbg: (1) %i (script_rec_pre4 != None)" %i)
            hybrid_script_list.append(script_rec_pre4)

        script_rec_pre4 = script_rec_pre3
        script_rec_pre3 = script_rec_pre2
        script_rec_pre2 = script_rec_pre
        script_rec_pre = script_rec
        ### goto for-loop back 

    if(script_rec_pre4 != None): #last
        hybrid_script_list.append(script_rec_pre4)
    if(script_rec_pre3 != None): #last
        hybrid_script_list.append(script_rec_pre3)
    if(script_rec_pre2 != None): #last
        hybrid_script_list.append(script_rec_pre2)
    if(script_rec_pre != None): #last
        hybrid_script_list.append(script_rec_pre)

    return hybrid_script_list

def get_hybrid_script_list4(script_list):
    script_list_len = len(script_list)
    #print( "script list len : " , script_list_len)

    #script_rec = { 'script': '', 'pos': -1, 'len': 0, 'string': '', 'ending': None}

    hybrid_script_list = []
    script_rec_pre3 = None
    script_rec_pre2 = None
    script_rec_pre = None
    script_rec = None
    for i in range(script_list_len):        
        script_rec = script_list[i]
        if(script_rec_pre != None):   # 2Í∞ú
            if(script_rec_pre2 != None):  # 3Í∞ú
                if(script_rec_pre3 != None):  # 4Í∞ú
                    hybrid_script = get_hybrid_script4(script_rec_pre3, script_rec_pre2, script_rec_pre, script_rec)
                    if(hybrid_script != None):
                        #print( "dbg: (4) %i (hybrid_script != None)" %i)
                        hybrid_script_list.append(hybrid_script)
                        script_rec_pre3 = None
                        script_rec_pre2 = None
                        script_rec_pre = None
                        script_rec = None

        if(script_rec_pre3 != None): # 1Í∞ú Ï≤òÎ¶¨
            #print( "dbg: (1) %i (script_rec_pre3 != None)" %i)
            hybrid_script_list.append(script_rec_pre3)

        script_rec_pre3 = script_rec_pre2
        script_rec_pre2 = script_rec_pre
        script_rec_pre = script_rec
        ### goto for-loop back 

    if(script_rec_pre3 != None): #last
        hybrid_script_list.append(script_rec_pre3)
    if(script_rec_pre2 != None): #last
        hybrid_script_list.append(script_rec_pre2)
    if(script_rec_pre != None): #last
        hybrid_script_list.append(script_rec_pre)

    return hybrid_script_list

def get_hybrid_script_list3(script_list):
    script_list_len = len(script_list)
    #print( "script list len : " , script_list_len)

    #script_rec = { 'script': '', 'pos': -1, 'len': 0, 'string': '', 'ending': None}

    hybrid_script_list = []
    script_rec_pre2 = None
    script_rec_pre = None
    script_rec = None
    for i in range(script_list_len):        
        script_rec = script_list[i]
        if(script_rec_pre != None):   # 2Í∞ú
            if(script_rec_pre2 != None):  # 3Í∞ú
                hybrid_script = get_hybrid_script3(script_rec_pre2, script_rec_pre, script_rec)
                if(hybrid_script != None):
                    #print( "dbg: (3) %i (hybrid_script != None)" %i)
                    hybrid_script_list.append(hybrid_script)
                    script_rec_pre2 = None
                    script_rec_pre = None
                    script_rec = None

        if(script_rec_pre2 != None): # 1Í∞ú Ï≤òÎ¶¨
            #print( "dbg: (1) %i (script_rec_pre2 != None)" %i)
            hybrid_script_list.append(script_rec_pre2)

        script_rec_pre2 = script_rec_pre
        script_rec_pre = script_rec
        ### goto for-loop back 

    if(script_rec_pre2 != None): #last
        hybrid_script_list.append(script_rec_pre2)
    if(script_rec_pre != None): #last
        hybrid_script_list.append(script_rec_pre)

    return hybrid_script_list

def get_hybrid_script_list2(script_list):
    script_list_len = len(script_list)
    #print( "script list len : " , script_list_len)

    #script_rec = { 'script': '', 'pos': -1, 'len': 0, 'string': '', 'ending': None}

    hybrid_script_list = []
    script_rec_pre = None
    script_rec = None
    i = 0
    while (i < script_list_len):
        script_rec = script_list[i]
        if(script_rec_pre != None):
            hybrid_script = get_hybrid_script2(script_rec_pre, script_rec)

            if(hybrid_script != None):
                #print( "dbg: %i (hybrid_script != None)" %i)
                hybrid_script_list.append(hybrid_script)
                script_rec = None
            else:
                #print( "dbg: %i (hybrid_script == None)" %i)
                hybrid_script_list.append(script_rec_pre)

        script_rec_pre = script_rec
        i += 1

    if(script_rec != None): #last
        hybrid_script_list.append(script_rec)

    return hybrid_script_list

def get_hybrid_script_list(script_list):
    hybrid_script_list5 = get_hybrid_script_list5(script_list)
    #print_script_list(hybrid_script_list5)

    hybrid_script_list4 = get_hybrid_script_list4(hybrid_script_list5)
    #print_script_list(hybrid_script_list4)

    hybrid_script_list3 = get_hybrid_script_list3(hybrid_script_list4)
    #print_script_list(hybrid_script_list3)

    hybrid_script_list2 = get_hybrid_script_list2(hybrid_script_list3)
    return hybrid_script_list2

def get_script_list_text(script_list):
    # old: get_chartype_list_text
    script_list_len = len(script_list)
    #print( "script list len : " , script_list_len)

    #script_rec = { 'script': '', 'pos': -1, 'len': 0, 'string': '', 'ending': None}

    script_list_text = '';
    for i in range(script_list_len):        
        script_list_text += script_list[i]['string']
        i += 1

    return script_list_text

def HGGetToken(str, debugflag = False, no_print_ending=True, 
    no_print_white_char=False, simple_print=False):
    # old: get_string_char_type
    # old: GetCharTypeList_String
    # old: GetScriptList
    if(debugflag == True): 
        print("<script list>")
    str_script_list = get_script_list(str)
    if(debugflag == True): 
        print_script_list(str_script_list)

    if(debugflag == True): 
        print("\r\n<hybrid script list>")
    new_str_script_list = get_hybrid_script_list(str_script_list)# Ïä§ÌÅ¨Î¶ΩÌä∏ Ìï©ÏÑ± => ÌÜ†ÌÅ∞ Î≥ÄÌôò
    if(debugflag == True): 
        print_script_list(new_str_script_list, no_print_ending, no_print_white_char, simple_print)

    return new_str_script_list

def GetStringListByScriptList(script_list):
    # old: make_word_tok_by_script_list
    if(script_list == None): return None
    script_list_len = len(script_list)
    #print( "script list len : " , script_list_len)

    string_list = []
    for i in range(0, script_list_len):
        script_rec = script_list[i]
        string_list.append(script_rec['string'])
    return string_list

def MakeWordTokByScriptList(script_list, debugPrint=False):
    # old: make_word_tok_by_script_list
    if(script_list == None): return None
    script_list_len = len(script_list)
    #print( "script list len : " , script_list_len)

    tok_list = []
    for i in range(script_list_len):
        script_rec = script_list[i]
        if(debugPrint == True):
            print('script_rec:', script_rec)
            
        if(script_rec['script'] in _keyword_char_state_list_): 
            pass
        elif(script_rec['script'] in _non_keyword_char_state_list_): 
            continue
        else:
            if(len(script_rec['script']) <= 1):
                continue
            if(get_keyword_type_num__scripts(script_rec['script']) <= 0):
                if(debugPrint == True):
                    print('continue # kwd type ÌïòÎÇòÎèÑ ÏóÜÎäî Í≤ΩÏö∞')
                continue # kwd type ÌïòÎÇòÎèÑ ÏóÜÎäî Í≤ΩÏö∞
            else: # type 2„Ñ±„Öê Ïù¥ÏÉÅ
                pass
        #
        tok_list.append(script_rec['string'])
    #
    return tok_list

def DelNonKeywordScript(script_list):
    if(script_list == None): return 
    script_list_len = len(script_list)
    #print( "script list len : " , script_list_len)

    i = 0
    while (i < script_list_len):
        #print(i, ':', script_list[i])
        script_rec = script_list[i]
        if(script_rec['script'] in _keyword_char_state_list_): 
            pass
        else:
            if(len(script_rec['script']) <= 1):
                del script_list[i]
                i -= 1
            elif(get_keyword_type_num__scripts(script_rec['script']) <= 0):
                del script_list[i] # kwd type ÌïòÎÇòÎèÑ ÏóÜÎäî Í≤ΩÏö∞
                i -= 1
            else: # type 2„Ñ±„Öê Ïù¥ÏÉÅ
                pass

        script_list_len = len(script_list)
        #print( "script list len : " , script_list_len)
        i += 1

def HGGetKeywordList(string, debugPrint=False):
    # old: get_word_tok_by_string
    # old: GetWordTokByString
    # old: HGGetWordToken
    str_script_list = HGGetToken(string, debugflag = False)
    if(str_script_list == None): 
        return None
    if(debugPrint == True):
        print('str_script_list:', *str_script_list, sep='\n')
    wordtok = MakeWordTokByScriptList(str_script_list, debugPrint=debugPrint)
    #print (wordtok)
    return wordtok

def test_script(chkstr):
    ##########
    char_type_string = get_scripts(chkstr)
    print('string len :', len(chkstr))
    print(chkstr)
    print('scripts num:', len(char_type_string))
    print(char_type_string)
    print("")

    script_list = get_script_list(chkstr)
    print('script_list num:', len(script_list))
    print("")

    #=token_list = HGGetToken(chkstr)
    token_list = HGGetToken(chkstr, debugflag = True)
    print('token_list num:', len(token_list))
    print("")

    script_list_text = get_script_list_text(token_list)
    print('[Origin Text(' + str(len(chkstr)) + ')]', chkstr)
    print('[New Text(' + str(len(script_list_text)) + ')]', script_list_text)
    if(chkstr != script_list_text):
        print("Error: not same.")
    else: 
        print("Ok: same.")
    print(""), print(""), print("")

def test_script_tok(chkstr, debugPrint=False):
    word_tok = HGGetKeywordList(chkstr, debugPrint=debugPrint)
    print (word_tok)
    print(""), print(""), print("")

def HGTokenize(string, LowerCase=False, tokenType = 'korean'):
    import re

    WordDictList = []
    if(string == None): 
        return WordDictList
    
    #
    if(LowerCase == True): # ÏÜåÎ¨∏ÏûêÌôî
        string = string.lower()
    
    #=WordList = string.split()
    if(tokenType == 'hgtoken'): # dilimit kwd token
        WordList = HGGetKeywordList(string)
    #=elif(tokenType == 'korean'): # ÌïúÍ∏Ä ÏßÄÏõê(ÏïÑÏßÅ ÏßÄÏõê Ïïà Ìï®, ÏïÑÎûòÎ°ú Í∞ÄÏÑú Ï≤òÎ¶¨)
    else: # ÌïúÍ∏Ä ÏßÄÏõê:
        """
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        
        ÏïÑÎûòÎäî ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÍ≥† Ï∞∏Í≥†Ïö©ÏúºÎ°ú ÎÇ®Í≤®ÎëîÎã§.
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        
        #-----
        #-----
        # ÏòÅÎ¨∏_Ïà´Ïûê_ÌïúÍ∏ÄÏùåÏ†à_ÌïúÏûê_ÌïúÍ∏ÄÏûêÎ™®_Ìò∏ÌôòÏûêÎ™®_ÌûàÎùºÍ∞ÄÎÇò(„Åê,„Çü)_Í∞ÄÌÉÄÏπ¥ÎÇò(„Ç†,„Éø)
        # Ìè¨Ìï®ÎêòÎäî Ïú†Ìòï: bag's bag-sender Ìïú¬∑Ïùº Èüì¬∑Áæé Ìïú„ÜçÏùº
        #  ===> Ïù¥Í±¥ {_token_connet_???_char_} Ï≤òÎ¶¨Ìï† ÎïåÎßå Í∞ÄÎä•
        #-----
        #---
        _token_hgsyllable_ = "Í∞Ä-Ìû£" # ÌïúÍ∏Ä ÏûêÎ™®
        _token_hgjamo_char_ = "·ÑÄ-·áø" # ÌïúÍ∏Ä ÏûêÎ™®
        _token_hgjamo_char_ext_a_ = "Í•†-Í•º" # ÌïúÍ∏Ä ÏûêÎ™® A
        _token_hgjamo_char_ext_b_ = "Ìû∞-Ìüª" # ÌïúÍ∏Ä ÏûêÎ™® B
        _token_hgjamo_compat_char_ = "„Ñ±-„Ö£„Ö•-„Üé" # ÌïúÍ∏Ä Ìò∏Ìôò ÏûêÎ™®

        _token_hgjamo_ = _token_hgjamo_char_
        _token_hgjamo_ = _token_hgjamo_char_ext_a_
        _token_hgjamo_ += _token_hgjamo_char_ext_b_
        _token_hgjamo_ += _token_hgjamo_compat_char_

        _token_hangul_ = _token_hgsyllable_
        _token_hangul_ += _token_hgjamo_
        #---
        _token_hanja_ = "‰∏Ä-Èøº"
        _token_japan_ = "„Åê-„Çü„Ç†-„Éø"
        _token_latin_number_ ="0-9"
        _token_latin_basic_ ="a-zA-Z"
        _token_latin_supplement_ ="√Ä-√ø"
        _token_latin_supplement_a_ ="ƒÄ-≈ø"
        _token_latin_supplement_b_ ="∆Ä-…è"
        #-------------
        #-------------
        
        #---
        _token_char_pattern_ = ""
        _token_char_pattern_ += _token_latin_number_
        _token_char_pattern_ += _token_latin_basic_
        _token_char_pattern_ += _token_latin_supplement_
        _token_char_pattern_ += _token_latin_supplement_a_
        _token_char_pattern_ += _token_latin_supplement_b_

        #---
        _token_char_pattern_ += _token_hangul_
        _token_char_pattern_ += _token_hanja_
        _token_char_pattern_ += _token_japan_

        #---
        #---
        _token_pattern_ = "[" + _token_char_pattern_ + "]+"
        
        #---
        #--- Ïó¨Í∏∞Îäî Î°úÏßÅÏùÑ ÏúÑÌï¥ Î∂ÑÌï† ÏÑ†Ïñ∏Ìïú Í≤ÉÏùÑ Ìï©Ïπú Í≤ÉÏù¥Í≥†, ÏïÑÎûòÎäî ÌÜµÌï©Ìï¥ÏÑú Ï†ÑÎã¨Ìïú Í≤É
        #=WordList = re.findall(_token_pattern_, string)
        #---
        # ÏÜåÎ¨∏Ïûê, ÎåÄÎ¨∏Ïûê, ÎùºÌã¥ Î≥¥Ï∂©, ÎùºÌã¥ Î≥¥Ï∂© ÌôïÏû•A, ÎùºÌã¥ Î≥¥Ï∂© ÌôïÏû•B, ÌïúÍ∏Ä ÏùåÏ†à, ÌïúÍ∏Ä ÏûêÎ™®, ÌïúÍ∏Ä ÏûêÎ™® ÌôïÏû•A, ÌïúÍ∏Ä ÏûêÎ™® ÌôïÏû•B, ÌïúÏûê, Í∞ÄÎÇò
        WordList = re.findall("[a-zA-Z√Ä-√øƒÄ-≈ø∆Ä-…è0-9Í∞Ä-Ìû£·ÑÄ-·áøÍ•†-Í•ºÌû∞-Ìüª„Ñ±-„Ö£„Ö•-„Üé‰∏Ä-Èøº„Åê-„Çü„Ç†-„Éø]+", string)
        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        
        """
        #-----
        # 1) re.findall("[\w]+", string) Î∞©ÏãùÏùÄ Ï†ëÏñ¥(Ïòà:can't)Î•º Î∂ÑÎ¶¨ÌïòÍ∏∞ ÎïåÎ¨∏Ïóê 
        # Ïò®Ï†ÑÌïú Ï†ëÏñ¥(Ïòà:can't) ÌòïÌÉúÎäî Ïò§ÏßÄ ÏïäÎäî Î¨∏Ï†úÍ∞Ä ÏûàÎã§.
        # 2) Ï†ëÏñ¥(Ïòà:can't)Î•º Ï≤òÎ¶¨ÌïòÍ∏∞ ÏúÑÌï¥ ÏûëÏùÄÎî∞Ïò¥Ìëú {'}Î•º Ï∂îÍ∞ÄÌïú 
        # re.findall("[\w']+", string) Î∞©ÏãùÏúºÎ°ú Ï≤òÎ¶¨ÌïòÎ©¥ Í∞ÄÎä•ÌïòÎã§.
        #-----
        # ÌÜ†ÌÅ∞ Î∂ÑÎ¶¨
        WordList = list()
        #= TokenList = re.findall("[\w]+", string) # Ï†ëÏñ¥(Ïòà:can't) Ìè¨Ìï®ÎêòÏßÄ ÏïäÍ≥† Î∂ÑÎ¶¨Îê®
        TokenList = re.findall("[\w']+", string) # Ï†ëÏñ¥(Ïòà:can't) Ìè¨Ìï®Îê®
        for word in TokenList:
            # add-1) Ïñë ÎÅùÏóê ÏïåÌååÎ≤≥Ïù¥ ÏïÑÎãå Î¨∏Ïûê('_') Ï†úÍ±∞: {_now then_ _common_}
            # add-2) Ï§ëÍ∞ÑÏóê ÏïåÌååÎ≤≥Ïù¥ ÏïÑÎãå Î¨∏Ïûê('_') Î∂ÑÎ¶¨: {gentle_men  woman_kind 1_st  21_st  30_th}
            divlist = word.split('_') # {gentle_men  woman_kind 1_st  21_st  30_th}
            if(len(divlist) > 0): # Î∂ÑÎ¶¨Îêú Îã®Ïñ¥ Î™©Î°ùÏù¥ ÏûàÎäî Í≤ΩÏö∞
                for reword in divlist:
                    if(len(reword) > 0): # '_' Î¨∏ÏûêÎßå ÏûàÏóàÎçò Í≤ΩÏö∞ÏóêÎäî Î∂ÑÎ¶¨ÎêòÎ©¥ Îπà Î¨∏ÏûêÏó¥Ïù¥ Îê®
                        WordList.append(reword)
            else:
                WordList.append(word)

        #######################                
        #######################                
        # ÏïÑÎûò ÏΩîÎìú Î≥¥Ï∂©: 
        # 1) re.findall("[\w]+", string) Î∞©ÏãùÏúºÎ°ú Ìò∏Ï∂úÌïòÎ©¥ ÏïÑÎûò ÏΩîÎìúÎäî ÌïÑÏöî ÏóÜÏßÄÎßå 
        # 2) Ï†ëÏñ¥(Ïòà:can't)Î•º Ï≤òÎ¶¨ÌïòÍ∏∞ ÏúÑÌï¥ ÏûëÏùÄÎî∞Ïò¥Ìëú {'}Î•º Ï∂îÍ∞ÄÌïú 
        # re.findall("[\w']+", string) Î∞©ÏãùÏúºÎ°ú Ï≤òÎ¶¨Ìï† Í≤ΩÏö∞ÏóêÎäî ÏïÑÎûò ÏΩîÎìúÍ∞Ä ÌïÑÏöîÌïòÎã§. 
        # ÎÇòÏ§ëÏóê ÏΩîÎìúÍ∞Ä Î∞îÎÄåÎçîÎùºÎèÑ Ïã§ÏàòÌïòÏßÄ ÏïäÎèÑÎ°ù ÌïÑÏöî ÏóÜÎçîÎùºÎèÑ ÏïÑÎûò ÏΩîÎìúÎäî Í≥ÑÏÜç Ïú†ÏßÄÌïúÎã§.
        #######################
        #######################
        #---
        # ÏúÑÏóêÏÑú Ïó∞Í≤∞ Î¨∏ÏûêÎ•º ÏÇ¨Ïö©Ìï† Í≤ΩÏö∞Ïóê
        # Îã®Ïñ¥ Ïïû(prefix)Í≥º Îí§(suffix)ÏóêÏÑú Î∂àÌïÑÏöîÌïú Í∏∞Ìò∏ Î¨∏Ïûê ÏÇ≠Ï†ú: {'-¬∑„Üç}
        #---
        _token_connet_eng_char_ = "'" # ÏòÅÎ¨∏Ïûê ÌÜ†ÌÅ∞ Ìï©ÏÑ± Í∏ÄÏûê: quatation
        _del_fix_chars_ = _token_connet_eng_char_ # "'" # ÏòÅÎ¨∏Ïûê ÌÜ†ÌÅ∞ Ìï©ÏÑ± Í∏ÄÏûê: quatation
        #---
        #=_token_connet_bacic_char_ = ",.\-" # ÌÜ†ÌÅ∞ Ìï©ÏÑ± Í∏ÄÏûê: minus
        #=_token_connet_hangul_char_ = "¬∑„Üç" # ÌïúÍ∏Ä ÌÜ†ÌÅ∞ Ìï©ÏÑ± Í∏ÄÏûê: middle-dot, old-hgjamo-a
        #---
        #=_del_fix_chars_ += _token_connet_bacic_char_ # ",.\-" # ÌÜ†ÌÅ∞ Ìï©ÏÑ± Í∏ÄÏûê: minus
        #---
        WordList = [token.strip(_del_fix_chars_) for token in WordList] 
                
    #print (WordList)
    return WordList

